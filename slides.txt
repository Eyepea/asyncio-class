= Using asyncio in Python 3.4
:author:    Aaron Maxwell <amax@redsymbol.net>
:backend:   slidy
:max-width: 45em
:source-highlighter: pygments
:data-uri:
:icons:

To fully participate: make sure you have Python 3.4 installed on your
machine. (Earlier versions aren't compatible with this course.) If you
don't, get it from python.org now, while we're waiting to get started.

== Concepts

asyncio is a module implementing asynchronous I/O, built into Python
3. Some of its key concepts:

* event loops
* transports
* protocols
* coroutines

Best starting point: http://python.org/dev/peps/pep-3156/

== Event Loops

* Built-in construct managing event waiting and dispatch
* Normally you don't need to think about it
* Can be configured, modified, refined, etc. when you do

== Transports

* Represents an I/O endpoint for network or local communication
* Think of it as a generalization of both a network socket and file
  handle, with useful methods
* can be bidirectional/streaming; unidirectional; datagram; or
  subprocess (piped I/O)
* Responsible for _how_ bytes are transmitted (not _what_ bytes)

== Protocols

* Represents the application layer, i.e. _what_ bytes are sent over a
  transport
* Always used in conjunction with transports
* Can be streaming (bi-dir), datagram, or custom
* There are a few standard reusable protocol classes. Substantial
  software systems will implement their own

== Coroutines

* In Python, a coroutine is a generator that follows certain
  conventions
* In 3.4, uses "yield from" syntax (PEP 380)
* In asyncio, independently running coroutines are managed by Tasks

== Resources

asyncio (formerly named "tulip"):

* http://python.org/dev/peps/pep-3156/
* http://docs.python.org/3.4/library/asyncio.html

Coroutines:

* http://python.org/dev/peps/pep-0342/
* http://www.dabeaz.com/coroutines/

Misc:

* Great article from Glyph - https://glyph.twistedmatrix.com/2014/02/unyielding.html
* Excellent gentle tutorial - http://www.getoffmalawn.com/blog/playing-with-asyncio
* "yield from" PEP - http://python.org/dev/peps/pep-0380/


////////////////
TODO: Tasks

[source,python]
----
def foo(x):
    print(x)
foo("Hello World")
----

////////////////
